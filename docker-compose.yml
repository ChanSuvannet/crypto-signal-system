# Main Docker Compose
# ============================================
# CRYPTO TRADING SIGNAL SYSTEM
# Main Docker Compose Configuration
# ============================================

version: '3.8'

# ==================== NETWORKS ====================
networks:
  crypto-network:
    driver: bridge

# ==================== VOLUMES ====================
volumes:
  mysql_data:
    driver: local
  timescaledb_data:
    driver: local
  redis_data:
    driver: local
  mongodb_data:
    driver: local
  rabbitmq_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# ==================== SERVICES ====================
services:

  # ==================== DATABASES ====================
  
  # MySQL - Primary Database
  mysql:
    image: mysql:8.0
    container_name: mysql
    restart: unless-stopped
    env_file:
      - ./secrets/database.txt
    environment:
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    ports:
      - "7100:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./database/schemas/complete_schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
      - ./infrastructure/databases/mysql/my.cnf:/etc/mysql/conf.d/custom.cnf
    networks:
      - crypto-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: --default-authentication-plugin=mysql_native_password

  # TimescaleDB - Time-Series Database
  timescaledb:
    image: timescale/timescaledb:latest-pg14
    container_name: crypto-timescaledb
    restart: unless-stopped
    env_file:
      - ./secrets/database.txt
    environment:
      POSTGRES_DB: ${TIMESCALE_DB}
      POSTGRES_USER: ${TIMESCALE_USER}
      POSTGRES_PASSWORD: ${TIMESCALE_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - timescaledb_data:/var/lib/postgresql/data
      - ./database/schemas/timescale_schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
    networks:
      - crypto-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${TIMESCALE_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis - Cache & Real-time Data
  redis:
    image: redis:7-alpine
    container_name: crypto-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./infrastructure/redis/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - crypto-network
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MongoDB - ML Models Storage
  mongodb:
    image: mongo:6
    container_name: crypto-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER:-mongo_user}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD:-mongo_password}
      MONGO_INITDB_DATABASE: ${MONGO_DATABASE:-crypto_ml_models}
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - crypto-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5

  # ==================== MESSAGE QUEUE ====================

  # RabbitMQ - Message Broker
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: crypto-rabbitmq
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-rabbitmq_user}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-rabbitmq_password}
    ports:
      - "5672:5672"   # AMQP port
      - "15672:15672" # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./infrastructure/rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
      - ./infrastructure/rabbitmq/definitions.json:/etc/rabbitmq/definitions.json
    networks:
      - crypto-network
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 10s
      timeout: 5s
      retries: 5

  # ==================== BACKEND ====================

  # NestJS API Gateway
  api-gateway:
    build:
      context: ./backend/api-gateway
      dockerfile: Dockerfile
    container_name: crypto-api-gateway
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 3000
      
      # Database connections
      MYSQL_HOST: mysql
      MYSQL_PORT: 3306
      MYSQL_DATABASE: ${MYSQL_DATABASE:-crypto_trading_bot}
      MYSQL_USER: ${MYSQL_USER:-crypto_user}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-crypto_password}
      
      TIMESCALE_HOST: timescaledb
      TIMESCALE_PORT: 5432
      TIMESCALE_DATABASE: ${TIMESCALE_DB:-crypto_timeseries}
      TIMESCALE_USER: ${TIMESCALE_USER:-timescale_user}
      TIMESCALE_PASSWORD: ${TIMESCALE_PASSWORD:-timescale_password}
      
      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      
      # RabbitMQ
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: ${RABBITMQ_USER:-rabbitmq_user}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD:-rabbitmq_password}
      
      # JWT Secret
      JWT_SECRET: ${JWT_SECRET:-your_jwt_secret_change_this}
      JWT_EXPIRATION: ${JWT_EXPIRATION:-7d}
      
      # CORS
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:3001}
    ports:
      - "3000:3000"
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - crypto-network
    volumes:
      - ./backend/api-gateway/logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ==================== PYTHON BOTS ====================

  # Market Data Collector Bot
  market-data-bot:
    build:
      context: ./backend/bots/market-data-bot
      dockerfile: Dockerfile
    container_name: crypto-market-data-bot
    restart: unless-stopped
    environment:
      # Exchange API Keys
      BINANCE_API_KEY: ${BINANCE_API_KEY}
      BINANCE_API_SECRET: ${BINANCE_API_SECRET}
      
      # Database
      MYSQL_HOST: mysql
      MYSQL_DATABASE: ${MYSQL_DATABASE:-crypto_trading_bot}
      MYSQL_USER: ${MYSQL_USER:-crypto_user}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-crypto_password}
      
      TIMESCALE_HOST: timescaledb
      TIMESCALE_DATABASE: ${TIMESCALE_DB:-crypto_timeseries}
      TIMESCALE_USER: ${TIMESCALE_USER:-timescale_user}
      TIMESCALE_PASSWORD: ${TIMESCALE_PASSWORD:-timescale_password}
      
      # Redis
      REDIS_HOST: redis
      
      # RabbitMQ
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_USER: ${RABBITMQ_USER:-rabbitmq_user}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD:-rabbitmq_password}
      
      # Bot Config
      COLLECTION_INTERVAL: ${DATA_COLLECTION_INTERVAL:-60}
      SYMBOLS: ${CRYPTO_SYMBOLS:-BTC/USDT,ETH/USDT,SOL/USDT}
    depends_on:
      mysql:
        condition: service_healthy
      timescaledb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - crypto-network
    volumes:
      - ./backend/bots/market-data-bot/logs:/app/logs

  # News Collector Bot
  news-collector-bot:
    build:
      context: ./backend/bots/news-collector-bot
      dockerfile: Dockerfile
    container_name: crypto-news-collector-bot
    restart: unless-stopped
    environment:
      # News API Keys
      NEWSAPI_KEY: ${NEWSAPI_KEY}
      CRYPTOPANIC_API_KEY: ${CRYPTOPANIC_API_KEY}
      TWITTER_API_KEY: ${TWITTER_API_KEY}
      TWITTER_API_SECRET: ${TWITTER_API_SECRET}
      
      # Database
      MYSQL_HOST: mysql
      MYSQL_DATABASE: ${MYSQL_DATABASE:-crypto_trading_bot}
      MYSQL_USER: ${MYSQL_USER:-crypto_user}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-crypto_password}
      
      REDIS_HOST: redis
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_USER: ${RABBITMQ_USER:-rabbitmq_user}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD:-rabbitmq_password}
      
      # Bot Config
      COLLECTION_INTERVAL: ${NEWS_COLLECTION_INTERVAL:-300}
      SYMBOLS: ${CRYPTO_SYMBOLS:-BTC,ETH,SOL}
    depends_on:
      mysql:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - crypto-network
    volumes:
      - ./backend/bots/news-collector-bot/logs:/app/logs

  # Technical Analysis Bot
  technical-analysis-bot:
    build:
      context: ./backend/bots/technical-analysis-bot
      dockerfile: Dockerfile
    container_name: crypto-technical-bot
    restart: unless-stopped
    environment:
      MYSQL_HOST: mysql
      MYSQL_DATABASE: ${MYSQL_DATABASE:-crypto_trading_bot}
      MYSQL_USER: ${MYSQL_USER:-crypto_user}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-crypto_password}
      
      TIMESCALE_HOST: timescaledb
      TIMESCALE_DATABASE: ${TIMESCALE_DB:-crypto_timeseries}
      TIMESCALE_USER: ${TIMESCALE_USER:-timescale_user}
      TIMESCALE_PASSWORD: ${TIMESCALE_PASSWORD:-timescale_password}
      
      REDIS_HOST: redis
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_USER: ${RABBITMQ_USER:-rabbitmq_user}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD:-rabbitmq_password}
      
      ANALYSIS_INTERVAL: ${TECH_ANALYSIS_INTERVAL:-60}
      TIMEFRAMES: ${TIMEFRAMES:-1h,4h,1d}
    depends_on:
      mysql:
        condition: service_healthy
      timescaledb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - crypto-network
    volumes:
      - ./backend/bots/technical-analysis-bot/logs:/app/logs

  # Sentiment Analysis Bot
  sentiment-analysis-bot:
    build:
      context: ./backend/bots/sentiment-analysis-bot
      dockerfile: Dockerfile
    container_name: crypto-sentiment-bot
    restart: unless-stopped
    environment:
      MYSQL_HOST: mysql
      MYSQL_DATABASE: ${MYSQL_DATABASE:-crypto_trading_bot}
      MYSQL_USER: ${MYSQL_USER:-crypto_user}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-crypto_password}
      
      REDIS_HOST: redis
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_USER: ${RABBITMQ_USER:-rabbitmq_user}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD:-rabbitmq_password}
      
      # Hugging Face for models
      HF_TOKEN: ${HUGGINGFACE_TOKEN}
      
      ANALYSIS_INTERVAL: ${SENTIMENT_ANALYSIS_INTERVAL:-300}
    depends_on:
      mysql:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - crypto-network
    volumes:
      - ./backend/bots/sentiment-analysis-bot/logs:/app/logs
      - ./backend/bots/sentiment-analysis-bot/models:/app/models

  # ICT Analysis Bot
  itc-analysis-bot:
    build:
      context: ./backend/bots/itc-analysis-bot
      dockerfile: Dockerfile
    container_name: crypto-itc-bot
    restart: unless-stopped
    environment:
      MYSQL_HOST: mysql
      MYSQL_DATABASE: ${MYSQL_DATABASE:-crypto_trading_bot}
      MYSQL_USER: ${MYSQL_USER:-crypto_user}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-crypto_password}
      
      TIMESCALE_HOST: timescaledb
      TIMESCALE_DATABASE: ${TIMESCALE_DB:-crypto_timeseries}
      TIMESCALE_USER: ${TIMESCALE_USER:-timescale_user}
      TIMESCALE_PASSWORD: ${TIMESCALE_PASSWORD:-timescale_password}
      
      REDIS_HOST: redis
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_USER: ${RABBITMQ_USER:-rabbitmq_user}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD:-rabbitmq_password}
      
      ANALYSIS_INTERVAL: ${ITC_ANALYSIS_INTERVAL:-300}
    depends_on:
      mysql:
        condition: service_healthy
      timescaledb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - crypto-network
    volumes:
      - ./backend/bots/itc-analysis-bot/logs:/app/logs

  # Signal Aggregator Bot
  signal-aggregator-bot:
    build:
      context: ./backend/bots/signal-aggregator-bot
      dockerfile: Dockerfile
    container_name: crypto-signal-aggregator
    restart: unless-stopped
    environment:
      MYSQL_HOST: mysql
      MYSQL_DATABASE: ${MYSQL_DATABASE:-crypto_trading_bot}
      MYSQL_USER: ${MYSQL_USER:-crypto_user}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-crypto_password}
      
      REDIS_HOST: redis
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_USER: ${RABBITMQ_USER:-rabbitmq_user}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD:-rabbitmq_password}
      
      # Signal validation thresholds
      MIN_RR_RATIO: ${MIN_RR_RATIO:-4.0}
      MIN_CONFIDENCE: ${MIN_CONFIDENCE:-60}
      MIN_WIN_RATE: ${MIN_WIN_RATE:-60}
    depends_on:
      mysql:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - crypto-network
    volumes:
      - ./backend/bots/signal-aggregator-bot/logs:/app/logs

  # ML Learning Engine
  ml-learning-engine:
    build:
      context: ./backend/bots/ml-learning-engine
      dockerfile: Dockerfile
    container_name: crypto-ml-engine
    restart: unless-stopped
    environment:
      MYSQL_HOST: mysql
      MYSQL_DATABASE: ${MYSQL_DATABASE:-crypto_trading_bot}
      MYSQL_USER: ${MYSQL_USER:-crypto_user}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-crypto_password}
      
      TIMESCALE_HOST: timescaledb
      TIMESCALE_DATABASE: ${TIMESCALE_DB:-crypto_timeseries}
      TIMESCALE_USER: ${TIMESCALE_USER:-timescale_user}
      TIMESCALE_PASSWORD: ${TIMESCALE_PASSWORD:-timescale_password}
      
      MONGODB_HOST: mongodb
      MONGODB_PORT: 27017
      MONGODB_DATABASE: ${MONGO_DATABASE:-crypto_ml_models}
      MONGODB_USER: ${MONGO_USER:-mongo_user}
      MONGODB_PASSWORD: ${MONGO_PASSWORD:-mongo_password}
      
      REDIS_HOST: redis
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_USER: ${RABBITMQ_USER:-rabbitmq_user}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD:-rabbitmq_password}
      
      # Training config
      TRAINING_INTERVAL: ${ML_TRAINING_INTERVAL:-86400}  # Daily
      AUTO_RETRAIN: ${ML_AUTO_RETRAIN:-true}
    depends_on:
      mysql:
        condition: service_healthy
      timescaledb:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - crypto-network
    volumes:
      - ./backend/bots/ml-learning-engine/logs:/app/logs
      - ./backend/bots/ml-learning-engine/models:/app/models
      - ./backend/bots/ml-learning-engine/notebooks:/app/notebooks
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]  # If GPU available

  # Notification Bot
  notification-bot:
    build:
      context: ./backend/bots/notification-bot
      dockerfile: Dockerfile
    container_name: crypto-notification-bot
    restart: unless-stopped
    environment:
      MYSQL_HOST: mysql
      MYSQL_DATABASE: ${MYSQL_DATABASE:-crypto_trading_bot}
      MYSQL_USER: ${MYSQL_USER:-crypto_user}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-crypto_password}
      
      REDIS_HOST: redis
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_USER: ${RABBITMQ_USER:-rabbitmq_user}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD:-rabbitmq_password}
      
      # Notification channels
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}
      TELEGRAM_CHAT_ID: ${TELEGRAM_CHAT_ID}
      DISCORD_WEBHOOK_URL: ${DISCORD_WEBHOOK_URL}
      EMAIL_SMTP_HOST: ${EMAIL_SMTP_HOST}
      EMAIL_SMTP_PORT: ${EMAIL_SMTP_PORT:-587}
      EMAIL_USER: ${EMAIL_USER}
      EMAIL_PASSWORD: ${EMAIL_PASSWORD}
      EMAIL_FROM: ${EMAIL_FROM}
      EMAIL_TO: ${EMAIL_TO}
    depends_on:
      mysql:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - crypto-network
    volumes:
      - ./backend/bots/notification-bot/logs:/app/logs

  # Feedback Processor Bot
  feedback-processor-bot:
    build:
      context: ./backend/bots/feedback-processor-bot
      dockerfile: Dockerfile
    container_name: crypto-feedback-processor
    restart: unless-stopped
    environment:
      MYSQL_HOST: mysql
      MYSQL_DATABASE: ${MYSQL_DATABASE:-crypto_trading_bot}
      MYSQL_USER: ${MYSQL_USER:-crypto_user}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-crypto_password}
      
      REDIS_HOST: redis
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_USER: ${RABBITMQ_USER:-rabbitmq_user}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD:-rabbitmq_password}
    depends_on:
      mysql:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - crypto-network
    volumes:
      - ./backend/bots/feedback-processor-bot/logs:/app/logs

  # ==================== FRONTEND ====================

  # Vue.js Dashboard
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        VITE_API_URL: ${VITE_API_URL:-http://localhost:3000}
        VITE_WS_URL: ${VITE_WS_URL:-ws://localhost:3000}
    container_name: crypto-frontend
    restart: unless-stopped
    ports:
      - "3001:80"
    depends_on:
      - api-gateway
    networks:
      - crypto-network
    volumes:
      - ./frontend/nginx.conf:/etc/nginx/conf.d/default.conf

  # ==================== MONITORING ====================
  # Prometheus - Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: crypto-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - prometheus_data:/prometheus
      - ./infrastructure/monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - crypto-network

  # Grafana - Metrics Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: crypto-grafana
    restart: unless-stopped
    ports:
      - "3002:3000"
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./infrastructure/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - crypto-network

  # ==================== REVERSE PROXY ====================

  # Nginx - Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: crypto-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./infrastructure/nginx/sites-available:/etc/nginx/sites-available
      - ./infrastructure/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - api-gateway
      - frontend
    networks:
      - crypto-network