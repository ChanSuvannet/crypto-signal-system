# ============================================================================
# MARKET DATA BOT CONFIGURATION
# ============================================================================

bot:
  name: "market-data-bot"
  version: "1.0.0"
  description: "Collects real-time market data from exchanges"

# Data Collection Settings
collection:
  # Collection intervals (seconds)
  intervals:
    ohlcv: 60 # Collect OHLCV every 60 seconds
    orderbook: 5 # Collect orderbook every 5 seconds
    trades: 10 # Collect recent trades every 10 seconds

  # Timeframes to collect
  timeframes:
    - "1m"
    - "5m"
    - "15m"
    - "30m"
    - "1h"
    - "4h"
    - "1d"

  # Primary timeframe for real-time processing
  primary_timeframe: "1h"

  # Trading pairs to monitor
  symbols:
    - "BTC/USDT"
    - "ETH/USDT"
    - "BNB/USDT"
    - "SOL/USDT"
    - "XRP/USDT"
    - "ADA/USDT"
    - "DOGE/USDT"
    - "MATIC/USDT"
    - "DOT/USDT"
    - "AVAX/USDT"

  # High priority pairs (collect more frequently)
  priority_symbols:
    - "BTC/USDT"
    - "ETH/USDT"

# Exchange Configuration
exchanges:
  binance:
    enabled: true
    priority: 1 # Primary exchange
    api_key: "${BINANCE_API_KEY}" # From environment
    api_secret: "${BINANCE_API_SECRET}"
    testnet: false
    rate_limit: 1200 # Requests per minute
    timeout: 30000 # 30 seconds

  coinbase:
    enabled: false
    priority: 2
    api_key: "${COINBASE_API_KEY}"
    api_secret: "${COINBASE_API_SECRET}"
    rate_limit: 15 # Much lower rate limit
    timeout: 30000

  kraken:
    enabled: false
    priority: 3
    api_key: "${KRAKEN_API_KEY}"
    api_secret: "${KRAKEN_API_SECRET}"
    rate_limit: 15
    timeout: 30000

# WebSocket Configuration
websocket:
  enabled: true
  reconnect_interval: 5 # seconds
  max_reconnect_attempts: 10
  ping_interval: 30 # seconds

  # Streams to subscribe
  streams:
    - "trade"
    - "ticker"
    - "kline"

# Database Configuration
database:
  timescaledb:
    host: "${TIMESCALEDB_HOST:localhost}"
    port: 5432
    database: "${TIMESCALEDB_DATABASE:crypto_timeseries}"
    user: "${TIMESCALEDB_USER:postgres}"
    password: "${TIMESCALEDB_PASSWORD:postgres}"
    pool_size: 10
    max_overflow: 20
    pool_timeout: 30

  redis:
    host: "${REDIS_HOST:localhost}"
    port: 6379
    db: 0
    password: "${REDIS_PASSWORD:}"
    max_connections: 50
    socket_timeout: 5
    socket_connect_timeout: 5

    # Cache TTL (seconds)
    cache_ttl:
      price: 60
      orderbook: 30
      ticker: 60

# Message Queue Configuration
rabbitmq:
  host: "${RABBITMQ_HOST:localhost}"
  port: 5672
  user: "${RABBITMQ_USER:guest}"
  password: "${RABBITMQ_PASSWORD:guest}"
  vhost: "/"

  # Exchanges
  exchanges:
    market_data: "market_data_exchange"

  # Queues
  queues:
    ohlcv: "ohlcv_queue"
    orderbook: "orderbook_queue"
    trades: "trades_queue"

  # Routing keys
  routing_keys:
    price_update: "market.price.update"
    volume_alert: "market.volume.alert"

# Data Processing
processing:
  # Batch settings
  batch_size: 100 # Records per batch
  batch_interval: 10 # seconds

  # Validation
  validation:
    enabled: true
    reject_invalid: false # Log but don't reject

  # Data quality checks
  quality_checks:
    check_gaps: true
    check_duplicates: true
    check_outliers: true
    outlier_std_threshold: 5 # Standard deviations

# Storage Settings
storage:
  # Write strategies
  write_strategy: "batch" # "immediate" or "batch"

  # Retention (days)
  retention:
    raw_ticks: 7 # Keep raw tick data for 7 days
    ohlcv_1m: 30 # 1-minute candles for 30 days
    ohlcv_5m: 90 # 5-minute candles for 90 days
    ohlcv_1h: 365 # 1-hour candles for 1 year
    ohlcv_1d: -1 # Daily candles forever

  # Compression
  compression:
    enabled: true
    algorithm: "lz4"

# Monitoring & Health
monitoring:
  health_check_interval: 60 # seconds

  # Metrics to track
  metrics:
    - "data_points_collected"
    - "api_calls_made"
    - "errors_encountered"
    - "latency_ms"
    - "queue_depth"

  # Alerts
  alerts:
    # Alert if no data collected for X seconds
    no_data_threshold: 300

    # Alert if error rate exceeds X%
    error_rate_threshold: 10

    # Alert if latency exceeds X ms
    latency_threshold: 5000

# Logging
logging:
  level: "INFO" # DEBUG, INFO, WARNING, ERROR, CRITICAL
  format: "json" # json or text

  # Log destinations
  handlers:
    console: true
    file: true

  # File logging
  file:
    path: "/var/log/market-data-bot"
    filename: "market-data-bot.log"
    max_bytes: 10485760 # 10MB
    backup_count: 5
    rotation: "time" # size or time

# Performance Tuning
performance:
  # Worker threads
  workers:
    ohlcv_collectors: 3
    orderbook_collectors: 2
    trade_collectors: 2
    processors: 4
    writers: 2

  # Queue sizes
  queue_sizes:
    collection: 1000
    processing: 500
    writing: 500

  # Async settings
  async_batch_size: 50
  async_timeout: 30

# Error Handling
error_handling:
  # Retry configuration
  retry:
    max_attempts: 3
    initial_delay: 1 # seconds
    max_delay: 60
    backoff_multiplier: 2

  # Circuit breaker
  circuit_breaker:
    enabled: true
    failure_threshold: 5
    success_threshold: 2
    timeout: 60 # seconds

# Development/Testing
development:
  debug_mode: false
  mock_data: false
  simulate_errors: false

  # Test mode - collect less data
  test_mode:
    enabled: false
    symbols: ["BTC/USDT"]
    timeframes: ["1h"]
    duration: 3600 # Run for 1 hour

# Feature Flags
features:
  websocket_streaming: true
  orderbook_collection: true
  trade_collection: true
  aggregated_trades: true
  funding_rates: false # For futures
  liquidations: false # For futures
